snippet i
	cin >> $1;
snippet ii
	cin >> $1 >> $2;
snippet iii
	cin >> $1 >> $2 >> $3;
snippet iiii
	cin >> $1 >> $2 >> $3 >> $4;
snippet iiiii
	cin >> $1 >> $2 >> $3 >> $4 >> $5;

snippet o
	cout << $1 << '\n';
snippet oo
	cout << $1 << ' ' << $2 << '\n';
snippet ooo
	cout << $1 << ' ' << $2 << ' ' << $3 << '\n';

snippet iv
	vector<$1> $2($3);
	for (auto& x : $2) cin >> x;

snippet is
	for (auto& x : $1) cin >> x;

snippet os
	for (const auto& x : $1) {
		cout << x << " \n"[&x == &$1.back()];
	}
	$0

snippet v
	vector
snippet vi
	vector<i32>
snippet vu
	vector<u32>
snippet vl
	vector<i64>
snippet vul
	vector<u64>

snippet yes
	cout << ($1 ? "yes" : "no") << '\n';
snippet YES
	cout << ($1 ? "YES" : "NO") << '\n';
snippet Yes
	cout << ($1 ? "Yes" : "No") << '\n';
snippet yay
	cout << ($1 ? "Yay!" : ":(") << '\n';

snippet ugraph
	vector<vector<u32>> G(N);
	REP(i, 0u, M) {
		uint a, b;
		cin >> a >> b;
		--a, --b;
		G[a].push_back(b);
		G[b].push_back(a);
	}
	$0
snippet wgraph
	using Edge = Edge<i32>;
	WeightedGraph G(N);
	REP(i, 0u, M) {
		uint a, b;
		i32 c;
		cin >> a >> b >> c;
		--a, --b;
		G[a].emplace_back(b, c);
		G[b].emplace_back(a, c);
	}
	$0
